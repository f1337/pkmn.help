{"version":3,"sources":["webpack:///./src/PercentBar.tsx","webpack:///./src/DexCoverage.tsx"],"names":["PercentBar","props","value","max","className","style","width","background","displayName","mostPokemon","filter","pkmn","t1","t2","NONE","types","DexCoverage","count","map","t","some","effectiveness","REGULAR","length","total","percent","toFixed"],"mappings":"oHAOO,SAASA,EAAWC,GACzB,MAAM,MAAEC,EAAK,IAAEC,GAAQF,EACvB,OACE,uBAAKG,UAAU,+BACb,uBACEC,MAAO,CACLC,MAAQJ,EAAQC,EAAO,IAAM,IAC7BI,WAAY,oBAEdH,UAAU,cAMlBJ,EAAWQ,YAAc,aCbzB,MAAMC,E,MAAc,EAAWC,OAAQC,IACrC,MAAOC,EAAIC,EAAK,IAAKC,MAAQH,EAAKI,MAElC,MAAuB,QAAfH,GAAwC,QAAfC,IAG7BG,EAA2Cf,IAC/C,MAAMgB,EAAQR,EAAYC,OAAQC,IAChC,MAAOC,EAAIC,EAAK,IAAKC,MAAQH,EAAKI,MAElC,OADiBd,EAAMc,MAAMG,IAAKC,GAAM,YAAWP,EAAIC,EAAIM,IAC3CC,KAAMC,GACbA,EAAgB,IAAcC,WAEtCC,OACGC,EAAQf,EAAYc,OAEpBE,GAAmB,KADXR,EAAQO,IACQE,QAAQ,GACtC,OACE,uBAAKtB,UAAU,6CACb,gBAACJ,EAAU,CAACE,MAAOe,EAAOd,IAAKqB,IAC/B,uBAAKpB,UAAU,qBACb,uBAAKA,UAAU,aAAaqB,E,KAC5B,uBAAKrB,UAAU,gBACZa,E,MAAUO,E,aAOrBR,EAAYR,YAAc,cAEX","file":"DexCoverage.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport interface PercentBarProps {\n  value: number;\n  max: number;\n}\n\nexport function PercentBar(props: PercentBarProps) {\n  const { value, max } = props;\n  return (\n    <div className=\"flex h1 w-100 Bar-Container\">\n      <div\n        style={{\n          width: (value / max) * 100 + \"%\",\n          background: \"var(--color-fg3)\",\n        }}\n        className=\"Bar-Fill\"\n      ></div>\n    </div>\n  );\n}\n\nPercentBar.displayName = \"PercentBar\";\n","import * as React from \"react\";\nimport { Effectiveness, matchupFor, Type } from \"./data\";\nimport { PercentBar } from \"./PercentBar\";\nimport { AllPokemon } from \"./pkmn\";\n\ninterface DexCoverageProps {\n  types: Type[];\n}\n\nconst mostPokemon = AllPokemon.filter((pkmn) => {\n  const [t1, t2 = Type.NONE] = pkmn.types;\n  // Slowking is weird right now... thanks Bulbapedia\n  return (t1 as any) !== \"???\" && (t2 as any) !== \"???\";\n});\n\nconst DexCoverage: React.FC<DexCoverageProps> = (props) => {\n  const count = mostPokemon.filter((pkmn) => {\n    const [t1, t2 = Type.NONE] = pkmn.types;\n    const matchups = props.types.map((t) => matchupFor(t1, t2, t));\n    return matchups.some((effectiveness) => {\n      return effectiveness > Effectiveness.REGULAR;\n    });\n  }).length;\n  const total = mostPokemon.length;\n  const ratio = count / total;\n  const percent = (ratio * 100).toFixed(0);\n  return (\n    <div className=\"pt1 tabular-nums flex flex-column lh-copy\">\n      <PercentBar value={count} max={total} />\n      <div className=\"flex items-center\">\n        <div className=\"tl mr2 w3\">{percent}%</div>\n        <div className=\"flex-auto tr\">\n          {count} / {total} forms\n        </div>\n      </div>\n    </div>\n  );\n};\n\nDexCoverage.displayName = \"DexCoverage\";\n\nexport default DexCoverage;\n"],"sourceRoot":""}